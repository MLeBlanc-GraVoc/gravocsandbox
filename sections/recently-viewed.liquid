{%- comment -%}theme-check-disable NestedSnippet,SchemaJsonFormat{%- endcomment -%}

<recently-viewed class="section" data-search-url="{{ routes.search_url }}?section_id={{ section.id }}&type=product"
  data-product-limit="{{ section.settings.products_to_show }}"
  {% if request.page_type == 'product' %} data-exclude-product="{{ product.id }}"{% endif %}
>
  {%- if request.design_mode or request.page_type == 'search' and search.performed and search.results_count > 0 -%}
    {% render 'featured-collection',
        products_to_show: section.settings.products_to_show,
        is_product_list: true,
        products: search.results,
        product_count: search.results_count,
        show_onboarding: request.design_mode
    %}
  {%- endif -%}
</recently-viewed>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    if (!customElements.get('recently-viewed')) {
      class RecentlyViewed extends HTMLElement {
        constructor() {
          super();
          this.fetchAttempts = 0;
          this.products = JSON.parse(localStorage.getItem('theme-recently-viewed') || '[]');
          this.excludeProduct = Number(this.dataset.excludeProduct);
          this.productLimit = this.dataset.productLimit;
          this.searchUrl = this.dataset.searchUrl;

          if (this.products.length > 0) {
            this.init();
          }
        }

        async init() {
          try {
            // Exclude specified product from list if it exists
            if (this.excludeProduct && this.products.includes(this.excludeProduct)) {
              this.products.splice(this.products.indexOf(this.excludeProduct), 1);
            }

            // Prepare the search query
            const searchQuery = this.products
              .map((product) => `id:${product}`)
              .slice(0, this.productLimit)
              .join(' OR ');

            const response = await fetch(`${this.searchUrl}&q=${searchQuery}`);
            if (!response.ok) throw new Error(response.status);

            // Fetch response template and insert sorted product items
            const tmpl = document.createElement('template');
            tmpl.innerHTML = await response.text();

            const el = tmpl.content.querySelector('recently-viewed');
            if (el && el.hasChildNodes()) {
              const productIDs = this.products;
              const ul = el.querySelector('ul.product-grid');

              // Sort list items based on the order of product IDs
              const sortedListItems = productIDs
                .map(id => Array.from(ul.querySelectorAll('li'))
                  .find(li => parseInt(li.getAttribute('data-product-id')) === id))
                .filter(Boolean);

              // Clear and append sorted list items
              ul.innerHTML = '';
              sortedListItems.forEach(li => ul.appendChild(li));

              this.innerHTML = el.innerHTML;

              // Render inline scripts
              const scripts = el.querySelectorAll('script');
              scripts.forEach((script) => {
                const newScript = document.createElement('script');
                if (script.src) {
                  newScript.src = script.src;
                } else {
                  newScript.textContent = script.textContent;
                }
                document.body.appendChild(newScript); // Or append it to a specific container
              });

              // Load external CSS
              const styles = el.querySelectorAll('link[rel="stylesheet"]');
              styles.forEach((link) => {
                const newLink = document.createElement('link');
                newLink.rel = 'stylesheet';
                newLink.href = link.href;
                document.head.appendChild(newLink);
              });

              // Call external functions to render and reinitialize
              window.renderSelects();
              window.loadDesktopOnlyTemplates();
              window.stickersReinit?.();
            }
          } catch (error) {
            this.fetchAttempts += 1;

            if (this.fetchAttempts > 4) {
              console.log('Recently Viewed section error:', error);
            } else {
              this.init(); // Retry
            }
          }
        }
      }

      customElements.define('recently-viewed', RecentlyViewed);
    }
  });
</script>

{% schema %}
{
  "name": "Recently viewed",
  "tag": "section",
  "class": "section section-recently-viewed",
  "disabled_on": {
    "groups": ["header", "footer", "aside"],
    "templates": ["password"]
  },
  "settings": [
    {
      "type": "paragraph",
      "content": "Shows the products that the user has most recently viewed. Section will not show if no products have been viewed yet."
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 4,
      "max": 14,
      "step": 1,
      "default": 8,
      "label": "Maximum products to show"
    },
    {
      "type": "header",
      "content": "Grid/carousel"
    },
    {
      "type": "select",
      "id": "desktop_layout",
      "default": "carousel",
      "label": "Desktop layout",
      "options": [
        {
          "value": "carousel",
          "label": "Carousel"
        },
        {
          "value": "grid",
          "label": "Grid"
        }
      ]
    },
    {
      "type": "select",
      "id": "mobile_layout",
      "default": "carousel",
      "label": "Mobile layout",
      "options": [
        {
          "value": "carousel",
          "label": "Carousel"
        },
        {
          "value": "grid",
          "label": "Grid"
        }
      ]
    },
    {
      "type": "select",
      "id": "columns_desktop",
      "options": [
        {
          "value": "6",
          "label": "XS"
        },
        {
          "value": "5",
          "label": "S"
        },
        {
          "value": "4",
          "label": "M"
        },
        {
          "value": "3",
          "label": "L"
        },
        {
          "value": "2",
          "label": "XL"
        }
      ],
      "default": "4",
      "label": "Card size on desktop"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "Number of columns on mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Set carousel/grid to full screen width",
      "default": false
    },
    {
      "type": "header",
      "content": "Header layout"
    },
    
  {
    "type": "select",
    "id": "content_max_width",
    "options": [
      {
        "value": "xs",
        "label": "XS"
      },
      {
        "value": "s",
        "label": "S"
      },
      {
        "value": "m",
        "label": "M"
      },
      {
        "value": "l",
        "label": "L"
      },
      {
        "value": "xl",
        "label": "XL"
      }
    ],
    "default": "m",
    "label": "Maximum heading width"
  },
  {
    "type": "text_alignment",
    "id": "desktop_heading_alignment",
    "default": "left",
    "label": "Heading alignment on desktop"
  },
  {
    "type": "text_alignment",
    "id": "mobile_heading_alignment",
    "default": "left",
    "label": "Heading alignment on mobile"
  }
,
    {
      "type": "header",
      "content": "Heading"
    },
    
  {
    "type": "inline_richtext",
    "id": "title",
    "default": "Recently viewed",
    "info": "Enter ++ for a line break.",
    "label": "Heading"
  },
  {
    "type": "select",
    "id": "italic_convert",
    "options": [
      {
        "value": "",
        "label": "Off (keep as italics)"
      },
      {
        "value": "light",
        "label": "Lighter \"Text\" color"
      },
      {
        "value": "accent",
        "label": "\"Accent gradient\" color"
      }
    ],
    "info": "The colors above can be set in the color schemes.",
    "default": "",
    "label": "Convert italic text to"
  },
  {
    "type": "select",
    "id": "heading_size",
    "options": [
      {
        "value": "h4",
        "label": "XS"
      },
      {
        "value": "h3",
        "label": "S"
      },
      {
        "value": "h2",
        "label": "M"
      },
      {
        "value": "h1",
        "label": "L"
      },
      {
        "value": "h0",
        "label": "XL"
      }
    ],
    "default": "h2",
    "label": "Heading size"
  }
,
    {
      "type": "header",
      "content": "Description"
    },
    
  {
    "type": "richtext",
    "id": "text",
    
    "label": "Description"
  },
  {
    "type": "select",
    "id": "text_size",
    "options": [
      {
        "value": "t6",
        "label": "2XS"
      },
      {
        "value": "t5",
        "label": "XS"
      },
      {
        "value": "t4",
        "label": "S"
      },
      {
        "value": "t3",
        "label": "M"
      },
      {
        "value": "t2",
        "label": "L"
      },
      {
        "value": "t1",
        "label": "XL"
      },
      {
        "value": "t0",
        "label": "2XL"
      }
    ],
    "default": "t3",
    "label": "Text size"
  }
,
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Section color scheme",
      "info": "To change the card color scheme, update your theme settings.",
      "default": "scheme-1"
    },
    {
      "type": "select",
      "id": "line_separator",
      "options": [
        {
          "value": "",
          "label": "Off"
        },
        {
          "value": "border-top",
          "label": "Top"
        },
        {
          "value": "border-bottom",
          "label": "Bottom"
        },
        {
          "value": "border-top border-bottom",
          "label": "Both"
        }
      ],
      "default": "",
      "label": "Line separator"
    },
    {
      "type": "header",
      "content": "Advanced"
    },
    {
      "type": "select",
      "id": "top_padding",
      "options": [
        {
          "value": "pt-0",
          "label": "0"
        },
        {
          "value": "pt-s05",
          "label": "0.5"
        },
        {
          "value": "pt-s",
          "label": "1"
        },
        {
          "value": "pt-s15",
          "label": "1.5"
        },
        {
          "value": "pt-s2",
          "label": "2"
        }
      ],
      "default": "pt-s",
      "label": "Top section spacing"
    },
    {
      "type": "select",
      "id": "bottom_padding",
      "options": [
        {
          "value": "pb-0",
          "label": "0"
        },
        {
          "value": "pb-s05",
          "label": "0.5"
        },
        {
          "value": "pb-s",
          "label": "1"
        },
        {
          "value": "pb-s15",
          "label": "1.5"
        },
        {
          "value": "pb-s2",
          "label": "2"
        }
      ],
      "default": "pb-s",
      "label": "Bottom section spacing"
    },
    {
      "type": "select",
      "id": "visibility",
      "options": [
        {
          "value": "visible-xs",
          "label": "Mobile"
        },
        {
          "value": "hidden-xs",
          "label": "Desktop"
        },
        {
          "value": "",
          "label": "Both"
        }
      ],
      "default": "",
      "info": "Lots of hidden content could be harmful for SEO.",
      "label": "Show on"
    },
    {
      "type": "select",
      "id": "heading_tag",
      "options": [
        {
          "value": "h1",
          "label": "H1"
        },
        {
          "value": "h2",
          "label": "H2"
        },
        {
          "value": "h3",
          "label": "H3"
        }
      ],
      "default": "h2",
      "info": "For SEO purposes, there should only be one H1 tag on the page.",
      "label": "Heading tag"
    }
  ],
  "presets": [
    {
      "name": "Recently viewed"
    }
  ]
}
{% endschema %}
